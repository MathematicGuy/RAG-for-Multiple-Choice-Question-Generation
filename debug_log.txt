JSON OUTPUT:
        Bạn là một trợ lý chuyên thực hiện các nhiệm vụ trả lời câu hỏi.
        Hãy sử dụng các phần nội dung được truy xuất bên dưới để trả lời câu hỏi.
        Nếu bạn không biết câu trả lời, chỉ cần nói rằng bạn không biết.

        Yêu cầu: Hãy trả về phản hồi dưới dạng một đối tượng JSON hợp lệ, với đúng ba khóa: "context", "question" và "answer". Chỉ xuất ra đối tượng JSON, không thêm bất kỳ nội dung nào khác.

        Ví dụ về đầu ra JSON:
        {
            "context": "OOP là một mô hình lập trình dựa trên khái niệm đối tượng.",
            "question": "OOP là gì?",
            "answer": "OOP là viết tắt của Lập trình hướng đối tượng, một mô hình tổ chức thiết kế phần mềm xung quanh dữ liệu hoặc đối tượng, thay vì các hàm và logic."
        }

        Context: T uần 3: T ổng hợp kiến thức buổi học số 3 + 4
Time-Series T eam
Ngày 21 tháng 6 năm 2025
Buổi học số 3 + 4 (Thứ 3 + Thứ 4, 17/06/2025 + 18/06/2025) bao gồm hai nội dung chính:
• Phần I: Khái niệm cơ bản về Object-Oriented Programming: Lập trình
hướng đối tượng
• Phần II: Các tính chất cơ bản trong Object-Oriented Programming
• Phần III: Ứng dụng Custom Layer trong PyT orch
Phần I: Khái niệm cơ bản về Object-Oriented
Programming: Lập trình hướng đối tượng
1 Giới thiệu về lập trình hướng đối tượng
Lập trình hướng đối tượng (OOP) là một phương pháp lập trình phổ biến, lấy các đối tượng làm
trung tâm để giải quyết vấn đề thực tế. Để hiểu rõ OOP , ta cần nắm các khái niệm cơ bản như
phạm vi biến, trừu tượng hóa, lớp, đối tượng và các tính chất đặc trưng như kế thừa, đa hình,
đóng gói và trừu tượng. 1.1 Bước đầu cho OOP - Khái niệm biến local và global (biến cục bộ
và biến toàn cục)
Phạm vi (scope) biến là yếu tố quan trọng trong lập trình, quyết định nơi một biến có thể truy
cập được.

AI VIETNAM aivietnam.edu.vn
Khái niệm
• INNER JOIN là phép kết hợp giao nhau ( ∩) giữa hai bảng. • Chỉ những dòng thỏa mãn điều kiện ON mới được đưa vào kết quả. —
1.3. Cú pháp
1 SELECT table1.column_a, table2.column_b
2 FROM table1
3 INNER JOIN table2
4 ON table1.primary_key = table2.foreign_key;
Ghi chú
• Dùng alias để viết ngắn gọn: orders o, customers c, ... • Điều kiện trong ON là trường chung giữa hai bảng (thường là khóa chính – khóa ngoại). —
1.4. Một số ví dụ
Ví dụ 1 — Lấy thông tin khách hàng đã đặt hàng
Từ nội dung kiến thức trên, ta đã có thể thực hiện được truy vấn Lấy tên và họ của mọi khách
hàng đặt hàng:
1 SELECT *
2 FROM orders
3 INNER JOIN customers
4 ON orders.customer_id = customers.customer_id;
Quan sát kết quả, có thể thấy các dòng trong bảng orders đã được ghép nối tương ứng với thông tin
khách hàng từ bảng customers, thông qua khóa customer_id. T uy nhiên, thay vì lấy toàn bộ các cột, ta có thể giới hạn truy vấn chỉ trả về các cột cần thiết như
order_id, first_name, và last_name:
1 SELECT order_id, first_name, last_name
2 FROM orders
3 INNER JOIN customers
4 ON orders.customer_id = customers.customer_id;
T ruy vấn này trả về danh sách các đơn hàng và tên khách hàng tương ứng. Như vậy , để trả lời cho câu
hỏi ban đầu — ”Khách hàng nào đã đặt đơn hàng #5?” — ta chỉ cần thêm điều kiện:
3

AI VIETNAM aivietnam.edu.vn
Tương tự:
Giả sử bạn là một người quản lý thư viện. T rong đó, sách và người đọc chính là những đối tượng
(objects), còn các quy trình như mượn sách, trả sách, đăng ký thẻ được xem là phương thức
(methods) – tức là hành vi của các đối tượng. Để có thể quản lý hiệu quả tất cả các đối tượng
và hành vi trong hệ thống thư viện này , ta cần một cách tổ chức logic và linh hoạt. Chính từ
nhu cầu đó, lập trình hướng đối tượng (OOP) ra đời – như một phương pháp giúp mô hình hóa
thế giới thực thành các thành phần trong phần mềm một cách rõ ràng và dễ mở rộng. 3 Class và Object
3.1 Class (Lớp)
Class như một bản vẽ kỹ thuật hoặc template, dùng để định nghĩa thuộc tính (attributes) và
phương thức (methods) của các đối tượng. • Attributes: định nghĩa các thông tin, đặc điểm cũng như các thuộc tính của Object.

AI VIETNAM aivietnam.edu.vn
Cả hai biến age ở lần in đầu tiên đều là biến cục bộ vì Python sẽ ưu tiên tìm biến cục bộ trước,
ở đây là đối số 2 truyền vào age. Vì ta không định nghĩa self.age, nên khi gọi, Python sẽ tìm đến
thứ tự tiếp theo là biến Class. Chính vì vậy , ta sẽ in ra được kết quả age = 1
1.1.2 Biến toàn cục (Global)
Biến toàn cục được khai báo bên ngoài hàm hoặc class, sử dụng được trên toàn chương trình
nhưng nên hạn chế để tránh gây khó kiểm soát. Không khuyến khích:
1 counter = 0 # Global variable
2
3 class MyClass:
4 def increment(self):
5 global counter
6 counter += 1
Khuyến khích:
1 class MyClass:
2 counter = 0 # Class attribute
3
4 def increment(self):
5 MyClass.counter += 1
2 Động lực cho sự ra đời của OOP
T rong thực tế, chúng ta luôn tìm cách mô hình hóa các thực thể thực tế thành các đối tượng số
hóa. Từ nhu cầu quản lý và tổ chức các thực thể này , lập trình hướng đối tượng ra đời để đơn
giản hóa và tối ưu hóa việc xây dựng phần mềm.
        Question: OOP là gì ?
        Answer:
    {
        "context": "OOP là một phương pháp lập trình phổ biến, lấy các đối tượng làm trung tâm để giải quyết vấn đề thực tế.",
        "question": "OOP là gì?",
        "answer": "OOP là viết tắt của Lập trình hướng đối tượng, một mô hình tổ chức thiết kế phần mềm xung quanh dữ liệu hoặc đối tượng, thay vì các hàm và logic."
    }